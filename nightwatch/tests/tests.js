const selectors = require('../supporting/selectors')
const data = require('../supporting/data')

module.exports = {
    beforeEach: browser => {
        browser.url('http://localhost:3000/')

    },
    after: browser => {
        browser.end()
    },

    "WQ26": browser => {
        browser
            .click(selectors.buttons.menuIcon)
            .waitForElementVisible(selectors.buttons.enterOption, 2000)
            .click(selectors.buttons.enterOption)
            .waitForElementVisible(selectors.fields.hdrInput, 2000)
            .setValue(selectors.fields.hdrInput, data.goodData.input.WQ26.hdr)
            .setValue(selectors.fields.mkeInput, data.goodData.input.WQ26.mke)
            .setValue(selectors.fields.oriInput, data.goodData.input.WQ26.ori)
            .setValue(selectors.fields.namInput, data.goodData.input.WQ26.nam)
            .click(selectors.dropDownBoxes.sexField.male)
            .click(selectors.dropDownBoxes.raceField.white)
            .setValue(selectors.fields.hgtInput, data.goodData.input.WQ26.hgt)
            .setValue(selectors.fields.wgtInput, data.goodData.input.WQ26.wgt)
            .setValue(selectors.fields.haiInput, data.goodData.input.WQ26.hai)
            .setValue(selectors.fields.offInput, data.goodData.input.WQ26.off)
            .setValue(selectors.fields.dowInput, data.goodData.input.WQ26.dow)
            .setValue(selectors.fields.olnInput, data.goodData.input.WQ26.oln)
            .setValue(selectors.fields.olsInput, data.goodData.input.WQ26.ols)
            .setValue(selectors.fields.oldInput, data.goodData.input.WQ26.old)
            .setValue(selectors.fields.licInput, data.goodData.input.WQ26.lic)
            .setValue(selectors.fields.lisInput, data.goodData.input.WQ26.lis)
            .setValue(selectors.fields.lidInput, data.goodData.input.WQ26.lid)
            .click(selectors.buttons.saveBtn)
        browser.expect.element(selectors.paragrahHeadings.validHeader).text.to.equal(data.goodData.input.WQ26.output.header)
        browser.expect.element(selectors.paragrahHeadings.errorList).text.to.equal(data.goodData.input.WQ26.output.errorList)
        browser.expect.element(selectors.paragrahHeadings.queryTitle).text.to.equal(data.goodData.input.WQ26.output.queryTitle)
        browser.expect.element(selectors.paragrahHeadings.queryBody).text.to.equal(data.goodData.input.WQ26.output.assembledQueryEnter)
    },
    //The zero at the end of the test name is to symbolize the same test but for modify wanted
    "WQ260": browser => {
        browser
            .click(selectors.buttons.menuIcon)
            .waitForElementVisible(selectors.buttons.enterOption, 2000)
            .click(selectors.buttons.modifyOption)
            .waitForElementVisible(selectors.fields.hdrInput, 2000)
            .setValue(selectors.fields.widInput, data.goodData.input.WQ26.wid)
            .setValue(selectors.fields.hdrInput, data.goodData.input.WQ26.hdr)
            .setValue(selectors.fields.mkeInput, data.goodData.input.WQ26.mke)
            .setValue(selectors.fields.oriInput, data.goodData.input.WQ26.ori)
            .setValue(selectors.fields.namInput, data.goodData.input.WQ26.nam)
            .click(selectors.dropDownBoxes.sexField.male)
            .click(selectors.dropDownBoxes.raceField.white)
            .setValue(selectors.fields.hgtInput, data.goodData.input.WQ26.hgt)
            .setValue(selectors.fields.wgtInput, data.goodData.input.WQ26.wgt)
            .setValue(selectors.fields.haiInput, data.goodData.input.WQ26.hai)
            .setValue(selectors.fields.offInput, data.goodData.input.WQ26.off)
            .setValue(selectors.fields.dowInput, data.goodData.input.WQ26.dow)
            .setValue(selectors.fields.olnInput, data.goodData.input.WQ26.oln)
            .setValue(selectors.fields.olsInput, data.goodData.input.WQ26.ols)
            .setValue(selectors.fields.oldInput, data.goodData.input.WQ26.old)
            .setValue(selectors.fields.licInput, data.goodData.input.WQ26.lic)
            .setValue(selectors.fields.lisInput, data.goodData.input.WQ26.lis)
            .setValue(selectors.fields.lidInput, data.goodData.input.WQ26.lid)
            .click(selectors.buttons.saveBtn)
        browser.expect.element(selectors.paragrahHeadings.validHeader).text.to.equal(data.goodData.input.WQ26.output.header)
        browser.expect.element(selectors.paragrahHeadings.errorList).text.to.equal(data.goodData.input.WQ26.output.errorList)
        browser.expect.element(selectors.paragrahHeadings.queryTitle).text.to.equal(data.goodData.input.WQ26.output.queryTitle)
        browser.expect.element(selectors.paragrahHeadings.queryBody).text.to.equal(data.goodData.input.WQ26.output.assembledQueryModify)
    },
    //Commented out the following test since there is a bug: WQ2-68
    // "WQ23": browser => {
    //     browser
    //         .click(selectors.buttons.menuIcon)
    //         .waitForElementVisible(selectors.buttons.enterOption, 2000)
    //         .click(selectors.buttons.enterOption)
    //         .waitForElementVisible(selectors.fields.hdrInput, 2000)
    //         .setValue(selectors.fields.hdrInput, data.goodData.input.WQ23.hdr)
    //         .setValue(selectors.fields.mkeInput, data.goodData.input.WQ23.mke)
    //         .setValue(selectors.fields.oriInput, data.goodData.input.WQ23.ori)
    //         .setValue(selectors.fields.namInput, data.goodData.input.WQ23.nam)
    //         .click(selectors.dropDownBoxes.sexField.male)
    //         .click(selectors.dropDownBoxes.raceField.white)
    //         .setValue(selectors.fields.hgtInput, data.goodData.input.WQ23.hgt)
    //         .setValue(selectors.fields.wgtInput, data.goodData.input.WQ23.wgt)
    //         .setValue(selectors.fields.haiInput, data.goodData.input.WQ23.hai)
    //         .setValue(selectors.fields.offInput, data.goodData.input.WQ23.off)
    //         .setValue(selectors.fields.dowInput, data.goodData.input.WQ23.dow)
    //         .setValue(selectors.fields.olnInput, data.goodData.input.WQ23.oln)
    //         .setValue(selectors.fields.olsInput, data.goodData.input.WQ23.ols)
    //         .setValue(selectors.fields.oldInput, data.goodData.input.WQ23.old)
    //         .setValue(selectors.fields.licInput, data.goodData.input.WQ23.lic)
    //         .setValue(selectors.fields.lisInput, data.goodData.input.WQ23.lis)
    //         .setValue(selectors.fields.lidInput, data.goodData.input.WQ23.lid)
    //         .click(selectors.buttons.saveBtn)
    //     browser.expect.element(selectors.paragrahHeadings.validHeader).text.to.equal(data.goodData.input.WQ23.output.header)
    //     browser.expect.element(selectors.paragrahHeadings.errorList).text.to.equal(data.goodData.input.WQ23.output.errorList)
    //     browser.expect.element(selectors.paragrahHeadings.queryTitle).text.to.equal(data.goodData.input.WQ23.output.queryTitle)
    //     browser.expect.element(selectors.paragrahHeadings.queryBody).text.to.equal(data.goodData.input.WQ23.output.assembledQueryEnter)
    // },
    "WQ230": browser => {
        browser
            .click(selectors.buttons.menuIcon)
            .waitForElementVisible(selectors.buttons.enterOption, 2000)
            .click(selectors.buttons.modifyOption)
            .waitForElementVisible(selectors.fields.hdrInput, 2000)
            .setValue(selectors.fields.widInput, data.goodData.input.WQ23.wid)
            .setValue(selectors.fields.hdrInput, data.goodData.input.WQ23.hdr)
            .setValue(selectors.fields.mkeInput, data.goodData.input.WQ23.mke)
            .setValue(selectors.fields.oriInput, data.goodData.input.WQ23.ori)
            .setValue(selectors.fields.namInput, data.goodData.input.WQ23.nam)
            .click(selectors.dropDownBoxes.sexField.male)
            .click(selectors.dropDownBoxes.raceField.white)
            .setValue(selectors.fields.hgtInput, data.goodData.input.WQ23.hgt)
            .setValue(selectors.fields.wgtInput, data.goodData.input.WQ23.wgt)
            .setValue(selectors.fields.haiInput, data.goodData.input.WQ23.hai)
            .setValue(selectors.fields.offInput, data.goodData.input.WQ23.off)
            .setValue(selectors.fields.dowInput, data.goodData.input.WQ23.dow)
            .setValue(selectors.fields.olnInput, data.goodData.input.WQ23.oln)
            .setValue(selectors.fields.olsInput, data.goodData.input.WQ23.ols)
            .setValue(selectors.fields.oldInput, data.goodData.input.WQ23.old)
            .setValue(selectors.fields.licInput, data.goodData.input.WQ23.lic)
            .setValue(selectors.fields.lisInput, data.goodData.input.WQ23.lis)
            .setValue(selectors.fields.lidInput, data.goodData.input.WQ23.lid)
            .click(selectors.buttons.saveBtn)
        browser.expect.element(selectors.paragrahHeadings.validHeader).text.to.equal(data.goodData.input.WQ23.output.header)
        browser.expect.element(selectors.paragrahHeadings.errorList).text.to.equal(data.goodData.input.WQ23.output.errorList)
        browser.expect.element(selectors.paragrahHeadings.queryTitle).text.to.equal(data.goodData.input.WQ23.output.queryTitle)
        browser.expect.element(selectors.paragrahHeadings.queryBody).text.to.equal(data.goodData.input.WQ23.output.assembledQueryModify)
    },
    //This test is to submit valid data. I commented out the test since it results in an error (WQ2)
    // "WQ216": browser => {
    //     browser
    //     .click(selectors.buttons.menuIcon)
    //     .waitForElementVisible(selectors.buttons.enterOption, 2000)
    //     .click(selectors.buttons.cancelOption)
    //     .waitForElementVisible(selectors.fields.widInput, 2000)
    //     .setValue(selectors.fields.widInput, data.goodData.input.WQ216.wid)
    //     .setValue(selectors.fields.resInput, data.goodData.input.WQ216.RFC)
    //     .setValue(selectors.fields.datInput, data.goodData.input.WQ216.DOC)
    //     .click(selectors.buttons.saveBtn)
    // browser.expect.element(selectors.paragrahHeadings.validHeader).text.to.equal(data.goodData.input.WQ216.output.header)
    // browser.expect.element(selectors.paragrahHeadings.errorList).text.to.equal(data.goodData.input.WQ216.output.errorList)
    // browser.expect.element(selectors.paragrahHeadings.queryTitle).text.to.equal(data.goodData.input.WQ216.output.queryTitle)
    // browser.expect.element(selectors.paragrahHeadings.queryBody).text.to.equal(data.goodData.input.WQ216.output.assembledQuery)
    // },

    //this test has a zero in the name since we are clicking clear
    "WQ218": browser => {
        browser
            .click(selectors.buttons.menuIcon)
            .waitForElementVisible(selectors.buttons.enterOption, 2000)
            .click(selectors.buttons.cancelOption)
            .waitForElementVisible(selectors.fields.widInput, 2000)
            .setValue(selectors.fields.widInput, data.goodData.badData.input.WQ218.wid)
            .setValue(selectors.fields.resInput, data.goodData.badData.input.WQ218.RFC)
            .setValue(selectors.fields.datInput, data.goodData.badData.input.WQ218.DOC)
            .click(selectors.buttons.clearBtn)
        browser.expect.element(selectors.paragrahHeadings.queryTitle).text.to.contain('Submit query for validation.')
    },
    "WQ217": browser => {
        browser
            .click(selectors.buttons.menuIcon)
            .waitForElementVisible(selectors.buttons.enterOption, 2000)
            .click(selectors.buttons.cancelOption)
            .waitForElementVisible(selectors.fields.widInput, 2000)
            .setValue(selectors.fields.widInput, data.goodData.badData.input.WQ217.wid)
            .setValue(selectors.fields.resInput, data.goodData.badData.input.WQ217.RFC)
            .setValue(selectors.fields.datInput, data.goodData.badData.input.WQ217.DOC)
            .click(selectors.buttons.clearBtn)
        browser.expect.element(selectors.paragrahHeadings.queryTitle).text.to.contain('Submit query for validation.')
    },
    "WQ28": browser => {
        browser
            .click(selectors.buttons.menuIcon)
            .waitForElementVisible(selectors.buttons.enterOption, 2000)
            .click(selectors.buttons.enterOption)
            .waitForElementVisible(selectors.fields.hdrInput, 2000)
            .setValue(selectors.fields.hdrInput, data.goodData.badData.input.WQ28.hdr)
            .setValue(selectors.fields.mkeInput, data.goodData.badData.input.WQ28.mke)
            .setValue(selectors.fields.oriInput, data.goodData.badData.input.WQ28.ori)
            .setValue(selectors.fields.namInput, data.goodData.badData.input.WQ28.nam)
            .click(selectors.dropDownBoxes.sexField.male)
            .click(selectors.dropDownBoxes.raceField.white)
            .setValue(selectors.fields.hgtInput, data.goodData.badData.input.WQ28.hgt)
            .setValue(selectors.fields.wgtInput, data.goodData.badData.input.WQ28.wgt)
            .setValue(selectors.fields.haiInput, data.goodData.badData.input.WQ28.hai)
            .setValue(selectors.fields.offInput, data.goodData.badData.input.WQ28.off)
            .setValue(selectors.fields.dowInput, data.goodData.badData.input.WQ28.dow)
            .setValue(selectors.fields.olnInput, data.goodData.badData.input.WQ28.oln)
            .setValue(selectors.fields.olsInput, data.goodData.badData.input.WQ28.ols)
            .setValue(selectors.fields.oldInput, data.goodData.badData.input.WQ28.old)
            .setValue(selectors.fields.licInput, data.goodData.badData.input.WQ28.lic)
            .setValue(selectors.fields.lisInput, data.goodData.badData.input.WQ28.lis)
            .setValue(selectors.fields.lidInput, data.goodData.badData.input.WQ28.lid)
            .click(selectors.buttons.saveBtn)
        browser.expect.element(selectors.paragrahHeadings.errorList).text.to.contain('The "Sex" field must be included.')
        browser.expect.element(selectors.paragrahHeadings.errorList).text.to.contain('The "Race / Ethnicity" field must be included.')
        browser.expect.element(selectors.paragrahHeadings.errorList).text.to.contain('The "Height" field can only include numeric characters.')
        browser.expect.element(selectors.paragrahHeadings.errorList).text.to.contain('The "Height" field needs to have a value greater than 0.')
        browser.expect.element(selectors.paragrahHeadings.errorList).text.to.contain('The "Weight" field can only include numeric characters.')
        browser.expect.element(selectors.paragrahHeadings.errorList).text.to.contain('The "Weight" field needs to have a value greater than 0.')
        browser.expect.element(selectors.paragrahHeadings.errorList).text.to.contain('The "Hair" field can only include characters from the English Alphabet or special characters.')
        browser.expect.element(selectors.paragrahHeadings.errorList).text.to.contain('The "Offense" field has one or more periods, which are unacceptable in any field.')
        browser.expect.element(selectors.paragrahHeadings.errorList).text.to.contain('The "Date of Warrant/Violation" field must be included.')
    },
    "WQ28": browser => {
            browser
                .click(selectors.buttons.menuIcon)
                .waitForElementVisible(selectors.buttons.enterOption, 2000)
                .click(selectors.buttons.enterOption)
                .waitForElementVisible(selectors.fields.hdrInput, 2000)
                .setValue(selectors.fields.hdrInput, data.goodData.badData.input.WQ28.hdr)
                .setValue(selectors.fields.mkeInput, data.goodData.badData.input.WQ28.mke)
                .setValue(selectors.fields.oriInput, data.goodData.badData.input.WQ28.ori)
                .setValue(selectors.fields.namInput, data.goodData.badData.input.WQ28.nam)
                .click(selectors.dropDownBoxes.sexField.male)
                .click(selectors.dropDownBoxes.raceField.white)
                .setValue(selectors.fields.hgtInput, data.goodData.badData.input.WQ28.hgt)
                .setValue(selectors.fields.wgtInput, data.goodData.badData.input.WQ28.wgt)
                .setValue(selectors.fields.haiInput, data.goodData.badData.input.WQ28.hai)
                .setValue(selectors.fields.offInput, data.goodData.badData.input.WQ28.off)
                .setValue(selectors.fields.dowInput, data.goodData.badData.input.WQ28.dow)
                .setValue(selectors.fields.olnInput, data.goodData.badData.input.WQ28.oln)
                .setValue(selectors.fields.olsInput, data.goodData.badData.input.WQ28.ols)
                .setValue(selectors.fields.oldInput, data.goodData.badData.input.WQ28.old)
                .setValue(selectors.fields.licInput, data.goodData.badData.input.WQ28.lic)
                .setValue(selectors.fields.lisInput, data.goodData.badData.input.WQ28.lis)
                .setValue(selectors.fields.lidInput, data.goodData.badData.input.WQ28.lid)
                .click(selectors.buttons.saveBtn).click(selectors.buttons.clearBtn)
        browser.expect.element(selectors.paragrahHeadings.queryTitle).text.to.contain('Submit query for validation.')
    },
    "WQ210": browser => {
        browser
            .click(selectors.buttons.menuIcon)
            .waitForElementVisible(selectors.buttons.enterOption, 2000)
            .click(selectors.buttons.modifyOption)
            .waitForElementVisible(selectors.fields.hdrInput, 2000)
            .setValue(selectors.fields.widInput, data.goodData.badData.input.WQ210.wid)
            .setValue(selectors.fields.hdrInput, data.goodData.badData.input.WQ210.hdr)
            .setValue(selectors.fields.mkeInput, data.goodData.badData.input.WQ210.mke)
            .setValue(selectors.fields.oriInput, data.goodData.badData.input.WQ210.ori)
            .setValue(selectors.fields.namInput, data.goodData.badData.input.WQ210.nam)
            .click(selectors.dropDownBoxes.sexField.male)
            .click(selectors.dropDownBoxes.raceField.white)
            .setValue(selectors.fields.hgtInput, data.goodData.badData.input.WQ210.hgt)
            .setValue(selectors.fields.wgtInput, data.goodData.badData.input.WQ210.wgt)
            .setValue(selectors.fields.haiInput, data.goodData.badData.input.WQ210.hai)
            .setValue(selectors.fields.offInput, data.goodData.badData.input.WQ210.off)
            .setValue(selectors.fields.dowInput, data.goodData.badData.input.WQ210.dow)
            .setValue(selectors.fields.olnInput, data.goodData.badData.input.WQ210.oln)
            .setValue(selectors.fields.olsInput, data.goodData.badData.input.WQ210.ols)
            .setValue(selectors.fields.oldInput, data.goodData.badData.input.WQ210.old)
            .setValue(selectors.fields.licInput, data.goodData.badData.input.WQ210.lic)
            .setValue(selectors.fields.lisInput, data.goodData.badData.input.WQ210.lis)
            .setValue(selectors.fields.lidInput, data.goodData.badData.input.WQ210.lid)
            .click(selectors.buttons.saveBtn)
            browser.expect.element(selectors.paragrahHeadings.errorList).text.to.contain('The "Warrant ID" field can only include numeric characters.')
    },
}